"use client";

import { useState } from 'react';
import Link from 'next/link';
import { useRouter } from 'next/navigation';
import Notification from '../../components/Notification';

// –°–ø–∏—Å–æ–∫ —ç–º–æ–¥–∑–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∞–Ω–∏–º–µ
const emojiOptions = [
  'üèØ', '‚öîÔ∏è', 'üìì', 'üëä', 'ü¶∏', 'üëπ', 'üêâ', 'üé≠', 'üßô', 'ü¶ä', 
  'ü§ñ', 'üëæ', 'üöÄ', 'üåü', 'üîÆ', 'üí•', 'üß†', 'üëª', 'üå∏', 'üèÜ'
];

const genres = [
  '–≠–∫—à–µ–Ω', '–î—Ä–∞–º–∞', '–§—ç–Ω—Ç–µ–∑–∏', '–ö–æ–º–µ–¥–∏—è', '–†–æ–º–∞–Ω—Ç–∏–∫–∞', 
  '–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ', '–¢—Ä–∏–ª–ª–µ—Ä', '–£–∂–∞—Å—ã', '–°–ø–æ—Ä—Ç', '–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è',
  '–ü–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ—Å—Ç—å', '–ù–∞—É—á–Ω–∞—è —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞', '–ú—É–∑—ã–∫–∞–ª—å–Ω–æ–µ', '–ú–µ—Ö–∞',
  '–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π', '–î–µ—Ç–µ–∫—Ç–∏–≤', '–°–≤–µ—Ä—Ö—ä–µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ', '–°–ª–∞–π—Å-–æ—Ñ-–ª–∞–π—Ñ'
];

export default function NewAnimeRecommendation() {
  const router = useRouter();
  const [title, setTitle] = useState('');
  const [originalTitle, setOriginalTitle] = useState('');
  const [year, setYear] = useState('');
  const [selectedGenres, setSelectedGenres] = useState<string[]>([]);
  const [rating, setRating] = useState<number>(0);
  const [episodes, setEpisodes] = useState('');
  const [review, setReview] = useState('');
  const [hoverRating, setHoverRating] = useState<number | null>(null);
  const [selectedEmoji, setSelectedEmoji] = useState<string>('');
  const [imageUrl, setImageUrl] = useState<string>('');
  const [useCustomImage, setUseCustomImage] = useState<boolean>(false);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [notification, setNotification] = useState<{message: string, type: 'success' | 'error'} | null>(null);

  const handleGenreToggle = (genre: string) => {
    if (selectedGenres.includes(genre)) {
      setSelectedGenres(selectedGenres.filter(g => g !== genre));
    } else {
      setSelectedGenres([...selectedGenres, genre]);
    }
  };

  const handleRatingClick = (value: number) => {
    setRating(value);
  };

  const handleRatingHover = (value: number) => {
    setHoverRating(value);
  };

  const handleRatingLeave = () => {
    setHoverRating(null);
  };

  const handleImageToggle = () => {
    setUseCustomImage(!useCustomImage);
    if (useCustomImage) {
      setSelectedEmoji('');
    } else {
      setImageUrl('');
    }
  };

  const validateImageUrl = (url: string) => {
    try {
      new URL(url);
      return true;
    } catch (e) {
      return false;
    }
  };

  const showNotification = (message: string, type: 'success' | 'error') => {
    setNotification({ message, type });
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–µ–π
    if (!title || !year || selectedGenres.length === 0 || !rating) {
      setError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è');
      return;
    }

    if (!useCustomImage && !selectedEmoji) {
      setError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —ç–º–æ–¥–∑–∏ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
      return;
    }

    if (useCustomImage && !imageUrl) {
      setError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
      return;
    }

    if (useCustomImage && !validateImageUrl(imageUrl)) {
      setError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
      return;
    }
    
    try {
      setIsSubmitting(true);
      setError(null);
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
      const animeData = {
        title,
        image: useCustomImage ? 'üñºÔ∏è' : selectedEmoji,
        image_url: useCustomImage ? imageUrl : null,
        rating,
        year: parseInt(year),
        genres: selectedGenres,
        review
      };
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
      const response = await fetch('/api/anime', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(animeData),
      });
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–Ω–∏–º–µ');
      }
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏
      showNotification('–ê–Ω–∏–º–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ', 'success');
      
      // –ï—Å–ª–∏ –≤—Å—ë —Ö–æ—Ä–æ—à–æ, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–Ω–∏–º–µ —á–µ—Ä–µ–∑ 1.5 —Å–µ–∫—É–Ω–¥—ã
      setTimeout(() => {
        router.push('/anime');
        router.refresh();
      }, 1500);
      
    } catch (err: any) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–Ω–∏–º–µ:', err);
      setError(err.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∞–Ω–∏–º–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–Ω–∏–º–µ', 'error');
    } finally {
      setIsSubmitting(false);
    }
  };

  // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–≤–µ–∑–¥ —Ä–µ–π—Ç–∏–Ω–≥–∞
  const renderRatingStars = () => {
    const stars = [];
    const activeRating = hoverRating !== null ? hoverRating : rating;
    
    for (let i = 1; i <= 10; i++) {
      stars.push(
        <button
          key={i}
          type="button"
          className={`text-2xl ${i <= activeRating ? 'text-yellow-400' : 'text-gray-600'}`}
          onClick={() => handleRatingClick(i)}
          onMouseEnter={() => handleRatingHover(i)}
          onMouseLeave={handleRatingLeave}
        >
          ‚òÖ
        </button>
      );
    }
    
    return stars;
  };

  return (
    <div className="max-w-3xl mx-auto">
      {notification && (
        <Notification 
          message={notification.message} 
          type={notification.type} 
          onClose={() => setNotification(null)} 
        />
      )}
      
      <div className="flex items-center mb-8">
        <Link href="/anime" className="mr-4">
          <button className="btn">
            <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
            </svg>
          </button>
        </Link>
        <h1 className="text-3xl font-bold accent-glow">–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –∞–Ω–∏–º–µ</h1>
      </div>
      
      <div className="card p-8">
        {error && (
          <div className="bg-red-900/50 border border-red-800 text-white px-4 py-3 rounded-lg mb-6">
            <p>{error}</p>
          </div>
        )}
        
        <form onSubmit={handleSubmit} className="space-y-6">
          <div>
            <label htmlFor="title" className="block text-sm font-medium text-gray-300 mb-2">
              –ù–∞–∑–≤–∞–Ω–∏–µ –∞–Ω–∏–º–µ *
            </label>
            <input
              type="text"
              id="title"
              value={title}
              onChange={(e) => setTitle(e.target.value)}
              required
              className="w-full bg-gray-800 border border-gray-700 rounded-md py-2 px-4 text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: Attack on Titan"
            />
          </div>
          
          <div>
            <label htmlFor="originalTitle" className="block text-sm font-medium text-gray-300 mb-2">
              –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
            </label>
            <input
              type="text"
              id="originalTitle"
              value={originalTitle}
              onChange={(e) => setOriginalTitle(e.target.value)}
              className="w-full bg-gray-800 border border-gray-700 rounded-md py-2 px-4 text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: ÈÄ≤ÊíÉ„ÅÆÂ∑®‰∫∫ (Shingeki no Kyojin)"
            />
          </div>
          
          <div>
            <div className="flex justify-between items-center mb-2">
              <label className="block text-sm font-medium text-gray-300">
                –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ *
              </label>
              <div className="flex items-center">
                <label className="mr-2 text-sm text-gray-300">–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å URL:</label>
                <label className="relative inline-flex items-center cursor-pointer">
                  <input 
                    type="checkbox" 
                    className="sr-only peer" 
                    checked={useCustomImage}
                    onChange={handleImageToggle}
                  />
                  <div className="w-11 h-6 bg-gray-700 peer-focus:outline-none peer-focus:ring-2 peer-focus:ring-blue-500 rounded-full peer peer-checked:after:translate-x-full after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-gray-300 after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div>
                </label>
              </div>
            </div>
            
            {useCustomImage ? (
              <div>
                <input
                  type="url"
                  id="imageUrl"
                  value={imageUrl}
                  onChange={(e) => setImageUrl(e.target.value)}
                  className="w-full bg-gray-800 border border-gray-700 rounded-md py-2 px-4 text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent mb-2"
                  placeholder="https://example.com/image.jpg"
                />
                {imageUrl && validateImageUrl(imageUrl) && (
                  <div className="mt-2 p-2 border border-gray-700 rounded-md">
                    <img 
                      src={imageUrl} 
                      alt="Preview" 
                      className="h-40 w-auto mx-auto object-contain" 
                      onError={(e) => {
                        e.currentTarget.src = 'https://via.placeholder.com/150?text=Error';
                        setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ URL.');
                      }}
                    />
                  </div>
                )}
              </div>
            ) : (
              <div>
                <div className="flex flex-wrap gap-3 mb-3">
                  {emojiOptions.map((emoji) => (
                    <button
                      key={emoji}
                      type="button"
                      onClick={() => setSelectedEmoji(emoji)}
                      className={`w-10 h-10 flex items-center justify-center text-2xl rounded-md ${
                        selectedEmoji === emoji
                          ? 'bg-blue-700 text-white'
                          : 'bg-gray-800 text-white'
                      }`}
                    >
                      {emoji}
                    </button>
                  ))}
                </div>
                {selectedEmoji && (
                  <div className="mt-2 text-gray-300">
                    –í—ã–±—Ä–∞–Ω–æ: <span className="text-2xl">{selectedEmoji}</span>
                  </div>
                )}
              </div>
            )}
          </div>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <label htmlFor="year" className="block text-sm font-medium text-gray-300 mb-2">
                –ì–æ–¥ –≤—ã–ø—É—Å–∫–∞ *
              </label>
              <input
                type="number"
                id="year"
                value={year}
                onChange={(e) => setYear(e.target.value)}
                required
                min="1960"
                max={new Date().getFullYear()}
                className="w-full bg-gray-800 border border-gray-700 rounded-md py-2 px-4 text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 2013"
              />
            </div>
            
            <div>
              <label htmlFor="episodes" className="block text-sm font-medium text-gray-300 mb-2">
                –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–∏–∑–æ–¥–æ–≤ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
              </label>
              <input
                type="number"
                id="episodes"
                value={episodes}
                onChange={(e) => setEpisodes(e.target.value)}
                min="1"
                className="w-full bg-gray-800 border border-gray-700 rounded-md py-2 px-4 text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 25"
              />
            </div>
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-300 mb-2">
              –ñ–∞–Ω—Ä—ã *
            </label>
            <div className="flex flex-wrap gap-2">
              {genres.map((genre) => (
                <button
                  key={genre}
                  type="button"
                  onClick={() => handleGenreToggle(genre)}
                  className={`px-3 py-1 rounded-full text-sm ${
                    selectedGenres.includes(genre)
                      ? 'bg-blue-700 text-white'
                      : 'bg-gray-800 text-gray-300'
                  }`}
                >
                  {genre}
                </button>
              ))}
            </div>
            <div className="mt-2 text-sm text-gray-400">
              –í—ã–±—Ä–∞–Ω–æ: {selectedGenres.length} –∂–∞–Ω—Ä–æ–≤
            </div>
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-300 mb-2">
              –†–µ–π—Ç–∏–Ω–≥ *
            </label>
            <div className="flex items-center mb-2">
              <div className="flex">
                {renderRatingStars()}
              </div>
              <span className="ml-3 text-gray-300">
                {hoverRating !== null ? hoverRating : rating}/10
              </span>
            </div>
          </div>
          
          <div>
            <label htmlFor="review" className="block text-sm font-medium text-gray-300 mb-2">
              –ü–æ—á–µ–º—É —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—à—å? (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
            </label>
            <textarea
              id="review"
              value={review}
              onChange={(e) => setReview(e.target.value)}
              rows={5}
              className="w-full bg-gray-800 border border-gray-700 rounded-md py-2 px-4 text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              placeholder="–†–∞—Å—Å–∫–∞–∂–∏, –ø–æ—á–µ–º—É —ç—Ç–æ –∞–Ω–∏–º–µ —Å—Ç–æ–∏—Ç –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, —á—Ç–æ –≤ –Ω—ë–º –æ—Å–æ–±–µ–Ω–Ω–æ–≥–æ?"
            ></textarea>
          </div>
          
          <div className="flex justify-end space-x-4">
            <Link href="/anime">
              <button type="button" className="btn">
                –û—Ç–º–µ–Ω–∞
              </button>
            </Link>
            <button 
              type="submit" 
              className="btn-primary"
              disabled={isSubmitting}
            >
              {isSubmitting ? '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ...' : '–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é'}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
} 